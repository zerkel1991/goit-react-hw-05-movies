{"version":3,"file":"static/js/561.fac71c2d.chunk.js","mappings":"4OACA,GAAgB,KAAO,yBAAyB,MAAQ,2B,SC6CxD,EA3CmB,SAAC,GAAe,IAAdA,EAAa,EAAbA,SACrB,GAAiCC,EAAAA,EAAAA,UAAS,IAA1C,eAAOC,EAAP,KAAiBC,EAAjB,KAcA,OACA,kBAAMC,UAAWC,EAAAA,KAAQL,SAVJ,SAACM,GAEtB,GADAA,EAAEC,kBACEL,EAAUM,OACZ,OAAOC,MAAM,mFAEfT,EAASE,GACTC,EAAa,GACZ,EAGD,WAGI,kBACEC,UAAWC,EAAAA,MACXK,KAAO,YACPC,MAAST,EACTU,KAAK,OACLC,aAAa,MACbC,WAAS,EACTC,YAAY,gBACZC,SAxBwB,SAACV,GAC7BH,EAAaG,EAAEW,OAAON,MACvB,KAyBG,mBAASP,UAAWC,EAAAA,IAAOO,KAAK,SAAhC,sBAKH,ECsBD,EAtDe,WACb,OAA0BX,EAAAA,EAAAA,UAAS,IAAnC,eAAOiB,EAAP,KAAcC,EAAd,KACA,GAAoClB,EAAAA,EAAAA,UAAS,IAA7C,eAAOmB,EAAP,KAAmBC,EAAnB,KACA,GAAuCC,EAAAA,EAAAA,MAAvC,eAAOC,EAAP,KAAoBC,EAApB,KAEFD,EAAaE,IAAI,KAGfC,EAAAA,EAAAA,YAAU,WACHR,GAwBP,SAA0BA,GACxB,OAAOS,IAAAA,IAAA,kHACsGT,EADtG,+BAGR,CAzBCU,CAAiBV,GACdW,MAAK,SAAAC,GACDV,EAAWW,OAAS,EACrBtB,MAAM,2DAGNY,EAAcS,EAAOE,KAAKC,QAI7B,IAEAC,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,EAAhB,GAEf,GAAE,CAACjB,IAaJ,OACE,iCACE,SAAC,EAAD,CAAYlB,SAbe,SAAAE,GAC7BiB,EAASjB,GACTsB,EAAgB,CAACN,MAAOhB,GACzB,KAWG,wBACGkB,GACCA,EAAWkB,KAAI,SAAAC,GAAE,OACf,yBACE,SAAC,KAAD,CAAMC,GAAE,kBAAaD,EAAGE,IAAxB,SAA+BF,EAAGG,SAD3BH,EAAGE,GADG,QAQ1B,C","sources":["webpack://goit-react-hw-02-phonebook/./src/components/SearchForm/SearchForm.module.css?d6f1","components/SearchForm/SearchForm.jsx","components/pages/MoviesPage/Movies.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"form\":\"SearchForm_form__o80os\",\"input\":\"SearchForm_input__HOxJo\"};","import { useState } from \"react\"\nimport PropTypes from 'prop-types';\nimport s from './SearchForm.module.css'\nconst SearchForm = ({onSubmit}) =>{\nconst [movieName,setMovieName] = useState('')\n\nconst handleMovieNameChange = (e) => {\n  setMovieName(e.target.value)\n}\nconst handleSubmit = (e) =>{\ne.preventDefault()\nif(!movieName.trim()){\n  return alert(\"Введите запрос\")\n }\nonSubmit(movieName)\nsetMovieName('')\n}\n\nreturn(\n<form className={s.form} onSubmit={handleSubmit} >\n\n\n    <input\n      className={s.input}\n      name = 'movieName'\n      value = {movieName}\n      type=\"text\"\n      autoComplete=\"off\"\n      autoFocus\n      placeholder=\"Search movies\"\n      onChange={handleMovieNameChange}\n\n    />\n    <button  className={s.btn} type=\"submit\" >Search</button>\n  </form>\n)\n\n\n}\n\nSearchForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n\n};\n\n\nexport default SearchForm\n","import { useState, useEffect } from 'react';\nimport { Link,useSearchParams } from 'react-router-dom';\nimport axios from 'axios';\nimport SearchForm from 'components/SearchForm/SearchForm';\n\n\nconst Movies = () => {\n  const [query, setQuery] = useState('');\n  const [findMovies, setFindMovies] = useState('');\n  const [searchParams,setSearchParams] = useSearchParams();\n\nsearchParams.get('');\n\n\n  useEffect(() => {\n    if (!query) {\n      return;\n    }\n    fetchQueryMovies(query)\n      .then(result => {\n        if(findMovies.length < 1){\n          alert('Не найдено')\n\n        }else{\n          setFindMovies(result.data.results);\n        }\n\n\n      })\n\n      .catch(error => console.log(error));\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [query]);\n\n  const handleSearchFormSubmit = movieName => {\n    setQuery(movieName);\n    setSearchParams({query: movieName})\n  };\n\n  function fetchQueryMovies(query) {\n    return axios.get(\n      `https://api.themoviedb.org/3/search/movie?api_key=6d4189043188e599955137d322b584b7&language=en-US&query=${query}&page=1&include_adult=false`\n    );\n  }\n\n  return (\n    <>\n      <SearchForm onSubmit={handleSearchFormSubmit} />\n      <ul>\n        {findMovies &&\n          findMovies.map(el => (\n            <li key={el.id}>\n              <Link to={`/movies/${el.id}`}>{el.title}</Link>\n            </li>\n          ))}\n      </ul>\n    </>\n  );\n};\n\nexport default Movies;\n"],"names":["onSubmit","useState","movieName","setMovieName","className","s","e","preventDefault","trim","alert","name","value","type","autoComplete","autoFocus","placeholder","onChange","target","query","setQuery","findMovies","setFindMovies","useSearchParams","searchParams","setSearchParams","get","useEffect","axios","fetchQueryMovies","then","result","length","data","results","catch","error","console","log","map","el","to","id","title"],"sourceRoot":""}